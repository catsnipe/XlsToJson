using System.Collections.Generic;
using System.IO;
using System.Text;
using NPOI.SS.UserModel;
using UnityEditor;
using UnityEngine;

public class StaticValue_$$SHEET_NAME$$_Import : iXlsToJsonImporter
{
    const string CLASSTMPL_DATA_SIGN    = "//$$REGION DATA$$";
    const string CLASSTMPL_DATA_ENDSIGN = "//$$REGION_END DATA$$";

    static readonly string exportPath   = "$$EXPORT_PATH$$";
    static readonly string sheetName    = "$$SHEET_ORG$$";
    static bool            success      = false;

    public string GetExportPath()
    {
        return exportPath;
    }

    public bool CheckSuccess()
    {
        return success;
    }

    public void Exec(IWorkbook book, string exportDirectory)
    {
        success = true;
        var exportFilepath = Path.Combine(exportDirectory, exportPath);

        // check sheet
        var sheet = book.GetSheet(sheetName);
        if (sheet == null)
        {
            Debug.LogError($"sheet is not found. '{sheetName}'");
            success = false;
            return;
        }

        var posList = new Dictionary<string, XlsToJson.PosIndex>();
        string[,] grid = XlsToJson.GetGrid(sheet, posList);
        XlsToJson.PosIndex id = posList[XlsToJson.TRIGGER_ID];

        XlsToJson.InitAssembly();

        var sb = new StringBuilder();

        for (int r = id.R + 2; r < grid.GetUpperBound(0) + 1; r++)
        {
            var row = new $$TABLE_NAME$$.Row();
            int c = id.C;

            string cell = grid[r, c];

            // End of line
            if (string.IsNullOrEmpty(cell) == true)
            {
                break;
            }
            // Comment
            if (XlsToJson.CheckSignComment(cell) == true)
            {
                continue;
            }

            string line = "    new Row() {";

$$IMPORT_ROW$$
            line += "},";
            sb.AppendLine(line);
        }

        if (File.Exists(exportFilepath) == false)
        {
            Debug.LogError($"[XlsToJson] error: file not found. '{exportFilepath}'.");
        }
        else
        {
            var text   = File.ReadAllText(exportFilepath);

            int index0 = text.IndexOf(CLASSTMPL_DATA_SIGN) + CLASSTMPL_DATA_SIGN.Length + 2;
            int index1 = text.IndexOf(CLASSTMPL_DATA_ENDSIGN);

            if (index0 < 0 || index1 < 0)
            {
                Debug.LogError($"[XlsToJson] error: illegal format. '{exportFilepath}'.");
            }
            else
            {
                if (index1 > index0)
                {
                    text = text.Remove(index0, index1 - index0);
                }
                text = text.Replace(CLASSTMPL_DATA_ENDSIGN, sb.ToString() + CLASSTMPL_DATA_ENDSIGN);
                File.WriteAllText(exportFilepath, text);
            }

            AssetDatabase.Refresh(ImportAssetOptions.ForceUpdate);
        }

        Debug.Log($"[XlsToJson] create '{exportFilepath}'.");
    }

    static bool import(int r, int c, string cell, bool _success)
    {
        if (_success == false)
        {
            Debug.LogError($"[{XlsToJson.GetXLS_RC(r, c)}] '{cell}' import error!");
            success = false;
            return false;
        }
        return true;
    }
}
