using System.IO;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;
using UnityEditor;

public class AllScriptObj_$$EXCELL_NAME$$_Export
{
    static readonly string excellFilename  = "$$EXCELL_FILENAME$$";
    static readonly string exportDirectory = "$$EXPORT_DIRECTORY$$";

    const string Item = "Tools/XlsToJson/$$EXCELL_FILENAME$$/Update Excel from ScriptableObject";

    [MenuItem (Item, priority = $$MENU_PRIORITY$$)]
    static void Open()
    {
        IWorkbook srcbook;
        IWorkbook newbook;

        var excellDirectory = XlsToJson.SearchXlsDirectory(excellFilename);
        if (excellDirectory == null)
        {
            XlsToJson.LogError(XlsToJson.eMsg.FILE_NOTFOUND, excellFilename);
            return;
        }
        var xlsPath = Path.Combine(excellDirectory, excellFilename);

        if (XlsToJson.DialogSelect(XlsToJson.eMsg.SCRIPTOBJ_EXPORT_CONFIRM, xlsPath) == false)
        {
            return;
        }

        using (FileStream stream = new FileStream(xlsPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
        {
            srcbook = new XSSFWorkbook(stream);
            stream.Close();
        }
        newbook = new XSSFWorkbook();

        // for AutoSizeColumn(jp)
        ICellStyle cellStyle = newbook.CreateCellStyle();
        IFont font           = newbook.CreateFont();
        font.FontName        = "Serif";
        cellStyle.SetFont(font);

        // table list
$$EXPORT_EXEC_LIST$$
        File.Delete(xlsPath);

        using (FileStream stream = new FileStream(xlsPath, FileMode.OpenOrCreate, FileAccess.Write))
        {
            newbook.Write(stream);
            stream.Close();
        }

    }

}
