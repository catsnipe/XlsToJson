using System.Collections.Generic;
using System.IO;
using NPOI.SS.UserModel;
using UnityEditor;
using UnityEngine;

public class ScriptObj_$$SHEET_NAME$$_Import : iXlsToJsonImporter
{
    static readonly string exportPath = "$$EXPORT_PATH$$";
    static readonly string sheetName  = "$$SHEET_ORG$$";
    static bool            success    = false;

    public string GetExportPath()
    {
        return exportPath;
    }

    public bool CheckSuccess()
    {
        return success;
    }

    public void Exec(IWorkbook book, string exportDirectory)
    {
        success = true;
        var exportFilepath = Path.Combine(exportDirectory, exportPath);

        var data = ($$TABLE_NAME$$)AssetDatabase.LoadAssetAtPath(exportFilepath, typeof($$TABLE_NAME$$));
        if (data == null)
        {
            data = ScriptableObject.CreateInstance<$$TABLE_NAME$$>();
            AssetDatabase.CreateAsset((ScriptableObject)data, exportFilepath);
        }
        data.hideFlags = HideFlags.None;
        data.Rows.Clear();

        // check sheet
        var sheet = book.GetSheet(sheetName);
        if (sheet == null)
        {
            Debug.LogError($"sheet is not found. '{sheetName}'");
            success = false;
            return;
        }

        var posList = new Dictionary<string, XlsToJson.PosIndex>();
        string[,] grid = XlsToJson.GetGrid(sheet, posList);
        XlsToJson.PosIndex id = posList[XlsToJson.TRIGGER_ID];

        XlsToJson.InitAssembly();

        for (int r = id.R + 2; r < grid.GetUpperBound(0)+1; r++)
        {
            var row = new $$TABLE_NAME$$.Row();
            int c = id.C;

            string cell = grid[r, c];

            // End of line
            if (string.IsNullOrEmpty(cell) == true)
            {
                break;
            }
            // Comment
            if (XlsToJson.CheckSignComment(cell) == true)
            {
                continue;
            }

$$IMPORT_ROW$$
            data.Rows.Add(row);
        }

        // save scriptable object
        ScriptableObject obj = AssetDatabase.LoadAssetAtPath(exportFilepath, typeof(ScriptableObject)) as ScriptableObject;
        EditorUtility.SetDirty(obj);

        Debug.Log($"[XlsToJson] create '{exportFilepath}'.");
    }

    static bool import(int r, int c, string cell, bool _success)
    {
        if (_success == false)
        {
            Debug.LogError($"[{XlsToJson.GetXLS_RC(r, c)}] '{cell}' import error!");
            success = false;
            return false;
        }
        return true;
    }

}
